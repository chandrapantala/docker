#install docker in mysql stack1.yml create image container
---
version: '3.8'
services:
  mydb:
    image: mysql:5
    environment:
      MYSQL_ROOT_PASSWORD: ch1
  myword:
    image: wordpress
    ports:
      - 8787:80

-->docker stack deploy -c stack1.yml mych
-->docker stack ls
-->docker service ls
-->docker stack ps mych
-->docker stack rm mych

#stack2.yml
it would like install mysql and with no of replicas
---
version: '3.8'
services:
  mydb:
    image: mysql:5
    environment:
      MYSQL_ROOT_PASSWORD: ch1
    deploy:
      replicas: 2
  myword:
    image: wordpress
    ports:
      - 8787:80
    deploy:
      replicas: 2

-->docker stack deploy -c stack2.yml mychu
-->docker stack ls
-->docker service ls
-->docker service scale mychu_mybd=3  #replicas count can changed 2to3

#stack3.yml
insatll ci-cd process jenkins installation
---
version: '3.8'
services:
  myjenkins:
    image: jenkins/jenkins
    ports:
      - 5050:8080
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.hostname == manager
  myqa:
    image: tomcat
    ports:
      - 6060:8080
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.hostname == worker1
  myprod:
    image: tomcat
    ports:
      - 7070:8080
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.hostname == worker2

-->docker stack deploy -c ci-cd.yml cicd
-->docker stack ps cicd
#see on qa in install tomcat and prod in install tomcat and jenkin in install jenkins with help of "host-names"

#satck5.yml
selinium create images with limits chrome/hub
---
version: '3.8'
services:
  hub:
    image: selenium/hub
    ports:
      - 4444:4444
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "0.1"
          memory: "300M"

  chrome:
     image: selenium/node-chrome-debug
     ports:
       - 5901:5900
     deploy:
       replicas: 2
       resources:
         limits:
           cpus: "0.1"
           memory: "200M"

--->docker stack deploy -c stack5.yml selemium
--->docker service ls
--->docker service inspect selenium_hub --pretty
#show the in detailly resources and cpu and memory
--->docker service inspect selenium_chrome --pretty
--->docker stack rm selenium
